
#import "MessagesViewController.h"
#import "AddressView.h"
#import "ZKWebView.h"
#import "Masonry.h"
#import "NSObject+Description.h"
#import <WebKit/WebKit.h>

@interface MessagesViewController ()<WKUIDelegate,WKNavigationDelegate>
@property (nonatomic, strong) AddressView *addressView;
@property (nonatomic, strong) ZKWebView *webView;
- (IBAction)testBtn:(id)sender;

@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    //设置addressView
    CGRect addressViewFrame = CGRectMake(8, 10, self.view.frame.size.width-16, 30);
    self.addressView = [[AddressView alloc]initWithFrame:addressViewFrame Color:[UIColor colorWithWhite:0.95 alpha:1.0] SearchEngine:Baidu functionaType:Cancel];
    self.addressView.layer.cornerRadius = 8;
    [self.view addSubview:self.addressView];
    
    
    
    
    [self setUpLayout];
    
    //设置一些配置，注意要放在布局后面，因为有地方跟size有关
    [self.view layoutIfNeeded];
    [self setUpAddressView];
    
#pragma mark - 测试
    UIButton *testBtn = [[UIButton alloc]initWithFrame:CGRectMake(20, 20, 40, 40)];
    [testBtn setBackgroundColor:[UIColor redColor]];
    [self.view addSubview:testBtn];
    [testBtn addTarget:self action:@selector(clickTest) forControlEvents:UIControlEventTouchUpInside];
#pragma mark - 测试
}
- (void)clickTest
{
    NSLog(@"点击测试");
    NSString *urlScheme = @"zkbrowser://www.baidu.com";
    NSURL *url = [NSURL URLWithString:urlScheme];
    
    [self.extensionContext openURL:url completionHandler:^(BOOL success) {
        if (success) {
            NSLog(@"跳转成功");
        }else{
            NSLog(@"跳转失败");
        }
    }];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
    
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
    NSLog(@"becomeActive");
    if (conversation.selectedMessage) {
        NSLog(@"选择过消息了");
        [self.extensionContext openURL:[NSURL URLWithString:@"zkbrowser://"] completionHandler:^(BOOL success) {
            if (success) {
                NSLog(@"success");
            }else{
                NSLog(@"fail");
            }
        }];
    }
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
    NSLog(@"resignActive");
    [self removeTheWebView];
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
    NSLog(@"didReceiveMessage");
    NSLog(@"url is %@",message.URL);
    
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
    NSLog(@"startSendingMessage");
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
    NSLog(@"cancelSendingMessage");
}
- (void)willSelectMessage:(MSMessage *)message conversation:(MSConversation *)conversation
{
    NSLog(@"willSelectMessage");
    NSLog(@"url is %@",message.URL);
//    self.extensionContext
    NSString *urlScheme = @"zkbrowser://www.baidu.com";
    NSURL *url = [NSURL URLWithString:urlScheme];
    
    [self.extensionContext openURL:url completionHandler:^(BOOL success) {
        if (success) {
            NSLog(@"跳转成功");
        }else{
            NSLog(@"跳转失败");
        }
    }];
    
}
- (void)didSelectMessage:(MSMessage *)message conversation:(MSConversation *)conversation
{
    NSLog(@"didSelectMessage");
//    NSString *urlStr = [NSString stringWithFormat:@"ZKBrowser://action=iMessage&url=%@",message.URL.absoluteString];
//    NSString *urlStr = @"zkbrowser://action=Today";
    
   
//    UIResponder *responder = self;
//    while(responder){
//        if ([responder respondsToSelector: @selector(OpenURL:)]){
//            [responder performSelector: @selector(OpenURL:) withObject:url];
//        }
//        responder = [responder nextResponder];
//    }
}
-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    //will里面修改也不行，会明显闪到下面去，隐藏起来算了，后面再显示出来
    //观察发现它会自动隐藏起来，如果这里不修改的话，默认的还会好看点
    if (presentationStyle == MSMessagesAppPresentationStyleExpanded) {
        NSLog(@"将要展开");
    }else{
        NSLog(@"将要收拢");
        [self urlTextFieldResignFirstResponder];
    }
    [self.extensionContext openURL:[NSURL URLWithString:@"zkbrowser://www.baidu.com"] completionHandler:^(BOOL success) {
        if (success) {
            NSLog(@"跳转成功");
        }else{
            NSLog(@"跳转失败");
        }
    }];
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
    if (presentationStyle == MSMessagesAppPresentationStyleExpanded) {
        NSLog(@"完成展开");
        [self.addressView mas_updateConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.view.mas_top).offset(85+10);
        }];
        [self urlTextFieldBecomeFirstResponder];
    }else{
        NSLog(@"完成收拢");
        [self.addressView mas_updateConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.view.mas_top).offset(10);
        }];
        
        
    }
}
#pragma mark - Handler
- (void)btnTmpHandler
{
    NSLog(@"点击了输入框，展开-->DidExpanded-->移除遮罩-->textField becomeFirstResponder");
    [self requestPresentationStyle:MSMessagesAppPresentationStyleExpanded];
}
#pragma mark - SelfMade
- (void)setUpLayout
{
    //masonry test
    [self.addressView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view.mas_top).offset(10);
        make.left.equalTo(self.view.mas_left).offset(0);
        make.right.equalTo(self.view.mas_right).offset(0);
        make.height.mas_equalTo(30);
    }];
}
static int tag4btnTmp = 950121;
- (void)setUpAddressView
{
    __weak typeof(self) Wself = self;
    self.addressView.clickFunctionalBtnBlock = ^(id object){
        [Wself requestPresentationStyle:MSMessagesAppPresentationStyleCompact];
    };
    self.addressView.clickSearchEngineBtnBlock = ^(id object){
        NSLog(@"需要切换搜索引擎");
    };
    self.addressView.textFieldRetrunBlock = ^(id object){
        NSLog(@"开始搜索");
        [Wself createWebView];
        NSString *inputStr = Wself.addressView.urlTextField.text;
        
        if ([inputStr hasSuffix:@".com"]||[inputStr hasSuffix:@".org"]) {
            //是URL
            inputStr = [inputStr lowercaseString];
            if (![inputStr hasPrefix:@"http"]){
                inputStr = [NSString stringWithFormat:@"%@%@",@"https://",inputStr];
            }
        }else{
            //不是URL，默认搜索引擎搜索
            NSString *PreStrBaidu = @"https://www.baidu.com/s?ie=UTF-8&wd=";
            //考虑到有中文参数，所以需要编码
            //首先设置没有使用的特殊符号--即会被编码掉
            NSString *character2Escape = @"<>'\"*()$#@! ";
            //invertedSet 是取反， 即 除了character2Escape中的其他的字符串都是允许的，不会被编码
            NSCharacterSet *allowedCharacterSet = [[NSCharacterSet characterSetWithCharactersInString:character2Escape] invertedSet];
            inputStr = [inputStr stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];
            
            inputStr = [PreStrBaidu stringByAppendingString:object];
        }
        [Wself.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:inputStr]]];
    };
    self.addressView.clickShareBtnBlock = ^(id object){
        //拿到这个截图
        dispatch_async(dispatch_get_main_queue(), ^{
            UIGraphicsBeginImageContext(Wself.webView.frame.size);
            CGContextRef context = UIGraphicsGetCurrentContext();
            [Wself.webView.layer renderInContext:context];
            UIImage *snapshotIMG = UIGraphicsGetImageFromCurrentImageContext();
            UIGraphicsEndImageContext();
            //并且把这个截图传给webView，这样就好找了
            Wself.webView.snapShot = snapshotIMG;
            [Wself requestPresentationStyle:MSMessagesAppPresentationStyleCompact];
            [Wself createMessage];
        });
    };
    
    UIButton *tempMaskBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    tempMaskBtn.frame = self.addressView.urlTextField.frame;
    tempMaskBtn.tag = tag4btnTmp;
    [tempMaskBtn addTarget:self
                    action:@selector(btnTmpHandler)
          forControlEvents:UIControlEventTouchUpInside];
    [self.addressView addSubview:tempMaskBtn];
    
}
- (void)urlTextFieldBecomeFirstResponder
{
    UIButton *tmpMaskBtn = [self.addressView viewWithTag:tag4btnTmp];
    tmpMaskBtn.hidden = YES;
    [self.addressView.urlTextField becomeFirstResponder];
    self.addressView.functionalBtn.hidden = NO;
}
- (void)urlTextFieldResignFirstResponder
{
    UIButton *tmpMaskBtn = [self.addressView viewWithTag:tag4btnTmp];
    tmpMaskBtn.hidden = NO;
    [self.addressView.urlTextField resignFirstResponder];
    self.addressView.urlTextField.text = NULL;
    self.addressView.functionalBtn.hidden = YES;
}
#pragma mark - NavigationDelegate
//加载失败时调用
- (void)webView:(WKWebView *)webView didFailNavigation:(WKNavigation *)navigation withError:(NSError *)error
{
    NSLog(@"加载失败时调用-%s",__func__);
    NSLog(@"错误时--%@",error);
}
//接收响应后决定是否跳转
- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler
{
    decisionHandler(WKNavigationResponsePolicyAllow);
    //    NSLog(@"接收响应后决定是否跳转-%s",__func__);
    /*
    NSLog(@"有关navigatioNResponse的信息--\n 是否是主窗口:%@\n  response是:%@\n  是否显示MIMEType:%@",
          navigationResponse.forMainFrame?@"YES":@"NO",
          navigationResponse.response,
          navigationResponse.canShowMIMEType?@"YES":@"NO");
     */
}
//发送请求前是否跳转
- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler
{
    decisionHandler(WKNavigationActionPolicyAllow);
    //    NSLog(@"发送请求前是否跳转-%s",__func__);
    /*
    NSLog(@"有关navigationAction的信息--------------\ntargetframe窗口的:\n  mainFrame:%@,\n  request:%@,\n  securityOrigin:%@",
          navigationAction.targetFrame.mainFrame?@"YES":@"NO",
          navigationAction.targetFrame.request,
          navigationAction.targetFrame.securityOrigin);
    NSLog(@"\nsourceframe窗口的:\n mainFrame:%@,\n request:%@,\n  securityOrigin:%@",
          navigationAction.sourceFrame.mainFrame?@"YES":@"NO",
          navigationAction.sourceFrame.request,
          navigationAction.sourceFrame.securityOrigin);
     */
}
#pragma mark - WKUIDelegate
//JS方面要直接弹窗的
- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler
{
    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:webView.title message:message preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *ok = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        completionHandler();
    }];
    [alertVC addAction:ok];
    [self presentViewController:alertVC animated:YES completion:nil];
}
//JS方面要弹出一个带有确定或取消这种做选择的弹窗
- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL))completionHandler
{
    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:webView.title message:message preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *yes = [UIAlertAction actionWithTitle:@"Yes" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        completionHandler(YES);
    }];
    UIAlertAction *no = [UIAlertAction actionWithTitle:@"No" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        completionHandler(NO);
    }];
    [alertVC addAction:no];
    [alertVC addAction:yes];
    [self presentViewController:alertVC animated:yes completion:nil];
}
//JS方面弹出需要输入的窗口
- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * _Nullable))completionHandler
{
    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:webView.title message:UIActivityTypeMessage preferredStyle:UIAlertControllerStyleAlert];
    [alertVC addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.placeholder = @"测试输入内容的JS";
    }];
    UIAlertAction *done = [UIAlertAction actionWithTitle:@"Done" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        completionHandler(alertVC.textFields[0].text);
    }];
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        nil;
    }];
    [alertVC addAction:done];
    [alertVC addAction:cancel];
    [self presentViewController:alertVC animated:YES completion:nil];
}

#pragma mark - WebView
- (void)removeTheWebView
{
    [self.webView removeObserver:self forKeyPath:@"estimatedProgress"];
    [self.webView removeObserver:self forKeyPath:@"loading"];
    [self.webView removeFromSuperview];
    self.webView = nil;
}

- (void)createWebView
{
    //设置webView
    self.webView = [[ZKWebView alloc]initWithFrame:CGRectZero];
    
    self.webView.layer.shadowOffset = CGSizeMake(2, 4);
    self.webView.layer.shadowOpacity = 0.5;
    
    [self.webView addObserver:self
                   forKeyPath:@"estimatedProgress"
                      options:NSKeyValueObservingOptionNew
                      context:nil];
    
    [self.webView addObserver:self
                   forKeyPath:@"loading"
                      options:NSKeyValueObservingOptionNew
                      context:nil];
    
    self.webView.navigationDelegate = self;
    self.webView.UIDelegate = self;
    
//    __weak typeof(self) Wself = self;
//    self.webView.deallocBlock = ^(){
//        [Wself removeTheWebView];
//    };
    [self.view addSubview:self.webView];
    [self.webView.theProgressView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.webView.mas_top);
        make.left.equalTo(self.webView.mas_left);
        make.width.equalTo(self.webView.mas_width);
        make.height.mas_equalTo(2);
    }];
    
    [self.webView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.addressView.mas_bottom).offset(8);
        make.left.equalTo(self.view.mas_left).offset(8);
        make.right.equalTo(self.view.mas_right).offset(-8);
        make.bottom.equalTo(self.view.mas_bottom).offset(-50);
    }];
}

#pragma mark - MSMessage
- (void)createMessage
{
    MSMessageTemplateLayout *aLayout = [[MSMessageTemplateLayout alloc]init];
    aLayout.image = self.webView.snapShot;
    aLayout.imageTitle = self.webView.title;
    
    MSMessage *message = [[MSMessage alloc]init];
    message.layout = aLayout;
    
    message.URL = self.webView.URL;
    
    [self.activeConversation insertMessage:message completionHandler:^(NSError * _Nullable error) {
        if (error) {
            NSLog(@"Error of sendAlter -- %@",error);
        }
    }];
}
#pragma mark - KVO
static int hasAlreadyShowShareBtn = 0;
static float progressValueThreshold = 0.9;
- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(id)object
                        change:(NSDictionary<NSKeyValueChangeKey,id> *)change
                       context:(void *)context
{
    if (object == self.webView) {
        if ([keyPath isEqualToString:@"estimatedProgress"]) {
            id estimateProgress = change[NSKeyValueChangeNewKey];
            NSLog(@"%lf",[estimateProgress floatValue]);
            if ([estimateProgress floatValue] == 1) {
                //加载完成
                [self.webView.theProgressView setProgress:[estimateProgress floatValue] animated:YES];
                
            }else if ([estimateProgress floatValue] <= progressValueThreshold){
                //最开始最好给个假的，避免网不好不能加载的时候一直是空的条看不见
                self.webView.theProgressView.hidden = NO;
                [self.webView.theProgressView setProgress:progressValueThreshold animated:YES];
                
            }else{
                self.webView.theProgressView.hidden = NO;
                [self.webView.theProgressView setProgress:[estimateProgress floatValue] animated:YES];
            }
        }
        if ([keyPath isEqualToString:@"loading"]) {
            CFBooleanRef temp = (__bridge CFBooleanRef)(change[NSKeyValueChangeNewKey]);
            BOOL isLoading = temp == kCFBooleanFalse? NO:YES;
            if (isLoading) {
                //正在加载
                if (hasAlreadyShowShareBtn == 1) {
                    NSLog(@"执行 隐藏 一次 ");
                    //没有加载完成却展示了shareBtn，执行隐藏动画
                    hasAlreadyShowShareBtn = 0;
                    [self animation4loadingWebWithHandler:^{
                        
                    }];
                }
            }else{
                //加载完成
                if (hasAlreadyShowShareBtn == 0) {
                    NSLog(@"执行 展示 一次 ");
                    //加载完成了却没有展示shareBtn，执行展示动画
                    hasAlreadyShowShareBtn = 1;
                    [self animation4loadedWebWithHandler:^{
                        
                    }];
                }
            }
        }
    }
}
#pragma mark - Animation
- (void)animation4loadedWebWithHandler:(void(^)())complition
{
    [UIView animateWithDuration:0.5
                     animations:^{
                         self.webView.theProgressView.alpha = 0;
                         [self.addressView showall:YES];
                         [self.addressView layoutIfNeeded];
                     }
                     completion:^(BOOL finished) {
                         if (finished) {
                             //藏起来
                             self.webView.theProgressView.hidden = YES;
                             self.webView.theProgressView.alpha = 1.0;
                             //归零
                             [self.webView.theProgressView setProgress:0.0 animated:NO];
                             complition();
                         }
                     }];
}
- (void)animation4loadingWebWithHandler:(void(^)())complition
{
    
    [UIView animateWithDuration:0.5 animations:^{
        [self.addressView showall:NO];
        [self.addressView layoutIfNeeded];
    }completion:^(BOOL finished) {
        if (finished) {
            complition();
        }
    }];
    
}

- (IBAction)testBtn:(id)sender {
    NSString *urlScheme = @"zkbrowser://www.baidu.com";
    NSURL *url = [NSURL URLWithString:urlScheme];
    
    [self.extensionContext openURL:url completionHandler:^(BOOL success) {
        if (success) {
            NSLog(@"跳转成功");
        }else{
            NSLog(@"跳转失败");
        }
    }];
}
@end
